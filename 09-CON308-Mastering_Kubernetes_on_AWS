# CON308 - Mastering Kubernetes on AWS

* Kubernetes cluster setup choices
  * Minikube for development
  * Community - Kops
    * kubernetes-aws.io
  * Enterprise
    * elastic conainer service for kubernates (EKS)
    * core OS tectonic
    * red hat open shift
  * Custom
    * cloud formation
    * terraform
* Manage a kubernetes cluster: Kops
  * Community supported
  * Generates cloud formation or terra form scipts
  * github.com/kubernetes/kops
* Elastic container service for Kubernetes
  * Managed k8s control plane - highly available master and etcd
  * Bring worker nodes like ECS
  * Core tenents
    * enterprise grade workloads
    * 100% upstream K8's experience (no forking of the K8's side) - should work the same as minikube
    * Seemless, not not forced integration with other AWS services
  * hghly available URI so you don't have a per availability zone master and etcd
* Cluster setup at Zalando
  * Why kubernetes?
    * growth capacity
    * deployment strategy was custom and people had to be trained on it
    * initial approach was docker container on an ec2 instance
    * Gave high density
    * good abstraction
  * Muliple AWS accounts (one cluster per account)
    * currently ~50 kubernetes clusters
    * small clusters
      * limit impact of possible outages
  * Standard Linux OS, no AMI customization
  * Flannel to support > 50 nodes (because of limitation of routing tables in AWS)
  * nodes are updated in a rolling fashion (no reboots)
  * cluster operations
    * cluster registry in RDS
      * points to git repository for all configuration
    * cluster lifecycle manager
      * watches git repo
      * ensures it will apply to the cluster
* CI/CD of apps on Kubernetes
  * Look at Aws CodePipeline, AWS codeCommit, AWS codeBuild
  * In Build
    * Checkout
    * Build docker image
    * Push to ECR
    * deploy new application
    * update application
  * Process
    * AWS CodePipeline 
    * AWS code Commit (watches)
    * AWS codeBuild (build)
    * Lambda - does deploy


